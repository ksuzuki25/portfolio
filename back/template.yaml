#*******************************************************************************
# SAM Templateã€€for todo app
#*******************************************************************************
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template for Serverless Todo App

Parameters:
  Env:
    Description: Please select environment name
    Type: String
    Default: test
    AllowedValues:
      - test
      - dev
      - prod
  SystemName:
    Description: Please enter a name to identify the specified System.
    Type: String
    Default: kobuhei-develop-todo
  Worker:
    Description: Please enter the worker's Name as a format of FirstName LastName.
    Type: String
  Date:
    Description: Please enter the Date of the deployment as a format of yyyy/mm/dd.
    Type: String
    AllowedPattern : "^\\d{4}(/\\d{2}){2}$"
  BillingGroup:
    Description: Cost Tag.
    Type: String
  Runtime:
    Description: Please enter Lambda Runtime.
    Type: String
    Default: nodejs16.x
  CodeUri:
    Description: Please enter the Path of Lambda Function.
    Type: String
    Default: ./dist/function/
  NodeEnv:
    Type: AWS::SSM::Parameter::Value<String>
    Default: 'node-env'

Metadata: 
  AWS::CloudFormation::Interface: 
    ParameterGroups:
      - 
        Label: 
          default: Environment Setting
        Parameters: 
          - SystemName
          - Env
      - 
        Label: 
          default: Variables
        Parameters: 
          - CodeUri
          - Runtime
          - NodeEnv
      - 
        Label: 
          default: Tags
        Parameters: 
          - Worker
          - Date
          - BillingGroup

Globals:
  Api:
    OpenApiVersion: 3.0.2

Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub ${SystemName}-${Env}-back-apigw
      StageName: !Ref Env
      Auth:
        ApiKeyRequired: true
        UsagePlan: 
          UsagePlanName: !Sub ${SystemName}-${Env}-back-usageplan
          CreateUsagePlan: PER_API
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt UserPool.Arn
      Tags:
        Worker: !Ref Worker
        Date: !Ref Date
        BillingGroup: !Ref BillingGroup

  ApiFunction: 
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${SystemName}-${Env}-back
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /api/{proxy+}
            Method: any
            RestApiId:
              Ref: ApiGatewayApi
            Auth:
              ApiKeyRequired: true
      MemorySize: 512
      Handler: index.handler
      Runtime: !Ref Runtime
      Timeout: 30
      AutoPublishAlias: !Ref Env
      Role: !GetAtt LambdaExecutionRole.Arn
      CodeUri: !Ref CodeUri
      Handler: app.lambdaHandler
      Environment:
        Variables:
          NODE_ENV: !Ref NodeEnv
          COGNITO_USER_POOL_ID: !Ref UserPool
          COGNITO_APP_CLIENT_ID: !Ref UserPoolAppClient
      Layers:
        - !Ref LambdaLayer
      Tags:
        Worker: !Ref Worker
        Date: !Ref Date
        BillingGroup: !Ref BillingGroup

# -----------------------------------#
# LambdaLayer
# -----------------------------------#
  LambdaLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: !Sub ${SystemName}-${Env}-back-layer
      ContentUri: ./dist/layer
      CompatibleRuntimes:
        - !Ref Runtime  
      CompatibleArchitectures:
        - x86_64
    Metadata:
      BuildMethod: !Ref Runtime

# -----------------------------------#
# IAM
# -----------------------------------#
  LambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties: 
      ManagedPolicyName: !Sub ${SystemName}-${Env}-back-policy
      Path: /
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Sid: ReadWriteTable
            Effect: Allow
            Action:
              - dynamodb:BatchGetItem
              - dynamodb:GetItem
              - dynamodb:Query
              - dynamodb:Scan
              - dynamodb:BatchWriteItem
              - dynamodb:PutItem
              - dynamodb:UpdateItem
            Resource: 
              - !Sub 'arn:aws:dynamodb:*:*:table/${SystemName}-${Env}-todo-list'
          - Sid: GetStreamRecords
            Effect: Allow
            Action: dynamodb:GetRecords
            Resource: 
              - !Sub 'arn:aws:dynamodb:*:*:table/${SystemName}-${Env}-todo-list/stream/* '

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties: 
      AssumeRolePolicyDocument: 
        Version: 2012-10-17
        Statement:
          - 
            Effect: "Allow"
            Principal:      
              Service: 
                - "lambda.amazonaws.com"
            Action:         
              - "sts:AssumeRole"    
      ManagedPolicyArns:
        - !Ref LambdaPolicy
      RoleName: !Sub ${SystemName}-${Env}-back-role

# -----------------------------------#
# DynamoDB
# -----------------------------------#
  DynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${SystemName}-${Env}-todo-list'
      AttributeDefinitions: 
        - AttributeName: HashId
          AttributeType: S
        - AttributeName: RangeId
          AttributeType: S
      KeySchema: 
        - AttributeName: HashId
          KeyType: HASH
        - AttributeName: RangeId
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      Tags:
        - Key: Worker
          Value: !Ref Worker
        - Key: Date
          Value: !Ref Date
        - Key: BillingGroup
          Value: !Ref BillingGroup

# -----------------------------------#
# Cognito
# -----------------------------------#
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${SystemName}-${Env}-userpool
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireUppercase: true
          RequireNumbers: true
          RequireSymbols: true
          TemporaryPasswordValidityDays: 7
      Schema:
        - Name: 'email'
          StringAttributeConstraints:
            MinLength: '0'
            MaxLength: '2048'
          Required: true
          AttributeDataType: 'String'
          Mutable: true
      AutoVerifiedAttributes:
        - email
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      MfaConfiguration: 'OFF'
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Priority: 1
            Name: verified_email
      UsernameConfiguration:
        CaseSensitive: false
      VerificationMessageTemplate:
        DefaultEmailOption: CONFIRM_WITH_CODE
      UserPoolTags:
        Worker: !Ref Worker
        Date: !Ref Date
        BillingGroup: !Ref BillingGroup

  UserPoolAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName:  !Sub ${SystemName}-${Env}-userpool-client
      UserPoolId: !Ref UserPool
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      EnableTokenRevocation: true
      PreventUserExistenceErrors: ENABLED
      SupportedIdentityProviders:
        - COGNITO
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - email
        - openid
      AllowedOAuthFlowsUserPoolClient: true
      ReadAttributes:
        - email
        - email_verified
      WriteAttributes:
        - email
      CallbackURLs:
        - "https://portfolio.kobuhei-develop.com/list"
      LogoutURLs:
        - "https://portfolio.kobuhei-develop.com/login"

# -----------------------------------#
# Outputs
# -----------------------------------#
Outputs:
  UserPoolId:
    Description: Cognito UserPool ID
    Value: !Ref UserPool
  UserPoolAppClientId:
    Description: Cognito App Client ID
    Value: !Ref UserPoolAppClient